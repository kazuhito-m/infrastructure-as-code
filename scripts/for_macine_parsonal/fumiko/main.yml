# coding:utf-8
# for Debian 11

- hosts: all
  become: yes
  become_user: root

  vars:
    raid_dev: /dev/md0
    raid_level: 1
    raid_name: RAID
    raid_mount: /home
    bench_file: /root/output.html

  tasks:

  - block:

    - name: システム全更新。
      apt:
        update_cache: "yes"
        upgrade: "dist"

    - name: 必要なツールをインストール。
      apt:
        name:
          - tree
          - byobu
          - vim
          - curl
          - ntp
          - parted
          - mdadm
          - nfs-kernel-server
          - fdisk

  - block:

    # - name: ネットワーク設定ファイルを反映。
    #   copy: 
    #     src: resources/etc/network/interfaces
    #     dest: /etc/network/interfaces
    #     backup: yes

    - name: ホスト名設定。
      hostname:
        name: fumiko

  - block:

    - name: NTP設定ファイルを反映。
      copy: 
        src: resources/etc/ntp.conf
        dest: /etc/ntp.conf
        backup: yes

    - name: NTPサービス再起動。
      systemd:
        name: ntp.service
        state: restarted
        daemon_reload: yes
        enabled: yes

  - name: すでにRAIDが構築されているかを確認。
    shell: grep '/home' /etc/fstab
    register: sh_ls_raid_dev
    failed_when: no

  - block:

    - name: RAIDデバイス作成。
      shell: yes | mdadm --create --verbose "{{ raid_dev }}" --level="{{ raid_level }}" --raid-devices=2 /dev/sdb /dev/sdc

    - name: 今回追加したRAIDの状態を設定ファイルに記載(再起動してもマウントできるように)。
      shell: mdadm --detail --scan >> /etc/mdadm/mdadm.conf

    - name: RAID1のデバイスにEXT4のファイルシステムを作成。
      shell: mkfs.ext4 -L "{{ raid_name }}" "{{ raid_dev }}"

    # コレ以下のマウントディレクトリ作成とマウントがコケてしまうため、自力で(かつShellで)一度まうんとまでやってしまう。
    - name: 元のHomeを退避しマウントを自力でして退避したファイルをマウント後のところに移動
      shell: df | grep '/dev/md0' | grep '/home' || ( mv /home /home_taihi && mkdir /home/ && mount -w -t ext4 /dev/md0 /home && cp -ar /home_taihi/* /home/ && rm -rf /home_taihi )

    - name: マウント用のディレクトリを作成する。
      file:
        state: directory
        path: "{{ raid_mount }}"
        owner: root
        group: root
        mode: '0755'

    - name: RAID1デバイスのマウントを永続化。
      shell: echo "UUID=$(tune2fs -l /dev/md0 | grep UUID | sed -e 's/.*UUID.   *//g') /home ext4 defaults 0 0" >> /etc/fstab

    when: sh_ls_raid_dev.rc != 0

  - block:

    - name: NFS設定ファイルを配置
      copy: 
        src: resources/etc/exports
        dest: /etc/exports
        backup: yes

    - name: NFSサービス再起動。
      systemd:
        name: nfs-server.service
        state: restarted
        daemon_reload: yes
        enabled: yes

  - block:

    - name: 運用スクリプトをコピー。
      copy:
        src: "{{ item }}"
        dest: /usr/local/lib/maintenance/
        owner: root
        mode: "0755"
      with_fileglob:
        - resources/usr/local/lib/maintenance/*

    - name: 運用スクリプトの設定ファイルをコピー。
      copy:
        src: "{{ item }}"
        dest: /usr/local/etc/maintenance/
        owner: root
        mode: "0755"
      with_fileglob:
        - resources/usr/local/etc/maintenance/*

    - name: 運用スクリプトのログローテート設定ファイルをコピー。
      copy:
        src: "{{ item }}"
        dest: /etc/logrotate.d/
        owner: root
        mode: "0644"
      with_fileglob:
        - resources/etc/logrotate.d/*

    - name: 運用スクリプトのロディレクトリの作成。
      file:
        path: "/var/log/maintenance"
        state: directory
        owner: "root"
        mode: "775"

    - name: RAIDチェックスクリプトのcrontab設定。
      cron:
        name: mdのDiskArrayチェック。
        minute: "22"
        hour: "4,10,16,22"
        job: "/usr/local/lib/maintenance/health_check_raid_array.sh >> /var/log/maintenance/health_check_raid_array.log 2>&1"
        state: present

    - name: RAIDチェックスクリプトのcrontab設定。
      cron:
        name: homeのフルバックアップ。
        job: "/usr/local/lib/maintenance/full_backup_home.sh >> /var/log/maintenance/full_backup_home.log 2>&1"
        state: present
